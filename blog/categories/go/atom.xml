<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: go | Code Gangsta]]></title>
  <link href="http://codegangsta.io/blog/categories/go/atom.xml" rel="self"/>
  <link href="http://codegangsta.io/"/>
  <updated>2013-07-21T15:19:15-07:00</updated>
  <id>http://codegangsta.io/</id>
  <author>
    <name><![CDATA[Jeremy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Creating CLI Applications in Go]]></title>
    <link href="http://codegangsta.io/blog/2013/07/21/creating-cli-applications-in-go/"/>
    <updated>2013-07-21T14:24:00-07:00</updated>
    <id>http://codegangsta.io/blog/2013/07/21/creating-cli-applications-in-go</id>
    <content type="html"><![CDATA[<p>For as long as I have been using it, my go-to language for creating CLI applications was Ruby. After all, Ruby is a robust, mature language with many things to make us developers want to gyrate with joy (okay maybe that is just me).</p>

<p>To this day I still hold the opinion that Ruby provides the most elegant amount of expression when it comes to my everyday programming activities. Whether it is the language or the community that fosters clean code, I feel like an artisan every time I sit down to write an application or library in Ruby.</p>

<p>There is something so elegant and beautiful about creating a command line application with the following code:</p>

<p>``` ruby
desc "A todo application"
app :todo do
  desc "add a todo"
  command :add do</p>

<pre><code>puts "Your todo has been added"
</code></pre>

<p>  end
  desc "remove a todo"
  command :remove do</p>

<pre><code>puts "your todo has been removed"
</code></pre>

<p>  end
end
```</p>

<h2>Distributing Ruby</h2>

<p>While the code is beautiful, distributing Ruby programs is not. Now - I don't want to make you beleive that program distribution should be an easy thing, because it definitely is not. There are so many things that can possibly go wrong with an application when you expect it to leave your programming and test environments to run perfectly on your end users machines. Let me say it again; <em>Distributing programs is <strong>hard work!</strong></em></p>

<p>I'm sure you are thinking, "Why not distribute your app via Rubygems?". After attempting the distribution of a command line application via Rubygems I came to the following conclusion: <strong>Any application not intended exculsively for Rubyists should not be distributed via Rubygems.</strong> Luckily <a href="http://mitchellh.com/abandoning-rubygems">I am not the only one</a> who holds this position on distribution, so that leads those of us that wish to use Ruby on a long road to properly distribute a command line application.</p>

<h2>Custom Ruby and Vendoring</h2>

<p>The next natural option with Ruby would be to distribute your entire application independent of RubyGems. So you <em>really</em> only have one good option here, and that is to <a href="http://yehudakatz.com/2012/06/05/tokaido-status-update-implementation-details/">compile a custom version of Ruby</a> to distribute with each OS installer (Yes, you must have an installer) of your application. Just so you don't mess with a users current installation you must compile under a custom prefix; something along the lines of <code>/usr/local/&lt;yourapp&gt;/ruby</code>.</p>

<p>Once this is done it is important to make sure you vendor and distribute all of your gems that you use for your application. This can get nasty when it comes to native gems that rely on locaing dynamic libraries. Anyway, I hope you get the picture that <em>distributing a ruby app to end users can be a hassle.</em></p>

<h2>Building it in Go</h2>

<p>If you are adventurous you have probably played with, or heard of the <a href="http://golang.org/">Go programming language</a>. In fact I have started to blog about it for the past couple of weeks. My recent love affair with Go has led me to beleive that distributing applications to end users in Go is a much simpler process than languages like Ruby.</p>

<p>Since Go is a compiled language, binaries of your app can be precompiled for each platform that you wish to distribute for. While not as portable as C, (and who can be, C compilers are everwhere!) Go provides a lightweight set of tools that can compile on many platforms for those who wish their end users to compile from source.</p>

<h2>Introducing cli.go</h2>

<p>While I loved the simplicity in distributing an application in Go, I missed that expressiveness that I got from Ruby, so (shameless plug) I rolled my own CLI library called <a href="https://github.com/codegangsta/cli">cli.go</a>.</p>

<p><a href="https://github.com/codegangsta/cli">cli.go</a> provides that expressive, "Document as you code" model for building command line applications in Go. It is easily distributable and super fast! Building real command line apps is as easy as this:</p>

<p>``` go
package main</p>

<p>import "os"
import "github.com/codegangsta/cli"</p>

<p>func main() {
  app := cli.NewApp()
  app.Name = "boom"
  app.Usage = "make an explosive entrance"
  app.Action = func(c *cli.Context) {</p>

<pre><code>println("boom! I say!")
</code></pre>

<p>  }</p>

<p>  app.Run(os.Args)
}
```</p>

<p>Go check out the <a href="https://github.com/codegangsta/cli">cli.go</a> repo. <strong>Star</strong> it, <strong>fork</strong> it, <strong>Contribute</strong> to it. Let's make Go the go-to language for command line tools!</p>

<p>Keep writing beautiful code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Practical Go: Build Tags]]></title>
    <link href="http://codegangsta.io/blog/2013/07/11/practical-go-build-tags/"/>
    <updated>2013-07-11T07:42:00-07:00</updated>
    <id>http://codegangsta.io/blog/2013/07/11/practical-go-build-tags</id>
    <content type="html"><![CDATA[<p>In our <a href="blog/2013/07/08/c-bindings-in-go-a-practical-example/">last post</a> we wrote a simple set of bindings for libspotify in Go. By the end of the post we had an example compiling, but we had a bad API key for our spotify application. One obvious way to recify this would be to grab an API key if you are a Spotfy Premium user. Another workaround is to use a <em>mock</em> library to make sure the code is working the way we want. We will link this mock library with <strong>Build tags.</strong></p>

<h2>Mocking Spotify</h2>

<p>Start by installing libmockspotify:
<code>text
git clone git@github.com:mopidy/libmockspotify.git
cd libmockspotify
./autogen.sh
./configure
make
sudo make install
</code></p>

<p>Once libmockspotify is installed, we can link to that instead of the real libspotify:</p>

<p>``` go
package main</p>

<p>/*</p>

<h1>include &lt;libspotify/api.h></h1>

<h1>cgo LDFLAGS: -lmockspotify.2</h1>

<p>*/
import "C"
import "unsafe"</p>

<p>type Session struct {
session *C.sp_session
}</p>

<p>func main() {
key := "appkey_good"
session := Session{}
  appkey := C.CString(key)
  appkey_size := len(key)</p>

<p>  var config = C.sp_session_config {</p>

<pre><code>api_version:          C.SPOTIFY_API_VERSION,
cache_location:       C.CString(".spotify/"),
settings_location:    C.CString(".spotify/"),
user_agent:           C.CString("spotify for go"),
application_key:      unsafe.Pointer(appkey),
application_key_size: C.size_t(appkey_size)}
</code></pre>

<p>  C.sp_session_create(&amp;config, &amp;session.session)
  println("Session created!")
}
```</p>

<p>The following code should output:
<code>text
Session created!
</code></p>

<h2>Using build tags</h2>

<p>It's great that we have libmockspotify for testing purposes, but it doesn't make sense to always mock spotify in our project. This is where <strong>Build Tags</strong> come into play. We can use build tags to conditionally choose which library to link to.</p>

<p>Let's link both libspotify and libmockspotify in our file:
``` go
/*</p>

<h1>include &lt;libspotify/api.h></h1>

<h1>cgo LDFLAGS: -lmockspotify.2</h1>

<h1>cgo LDFLAGS: -lspotify.12</h1>

<p>*/
```</p>

<p>This approach obviously will not work as is, so we will instead link each library conditionally based on the <em>mock</em> build take that we will define:
``` go
/*</p>

<h1>include &lt;libspotify/api.h></h1>

<h1>cgo mock LDFLAGS: -lmockspotify.2</h1>

<h1>cgo !mock LDFLAGS: -lspotify.12</h1>

<p>*/
```</p>

<p>This will link libmockspotify when the <em>mock</em> build tag is defined, otherwise we will use the real libspotify. So then how do we define build tags? Simple:</p>

<p><code>text
go run -tags mock myfile.go
</code></p>

<p>Thats enough for today, have fun with build tags! I will leave you with one more pro tip!</p>

<p>In my <code>~/.vim</code> folder I have a ftplugin for Go that includes a binding for running tests:
<code>text
nmap &lt;Leader&gt;t :!go test -tags test &lt;cr&gt;
</code></p>

<p>You see how I include the <em>test</em> tag in all of my test running? This makes it convenient when linking mock libraries specific for running tests!</p>

<p>Until next time!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Practical Go: C Bindings]]></title>
    <link href="http://codegangsta.io/blog/2013/07/08/c-bindings-in-go-a-practical-example/"/>
    <updated>2013-07-08T06:40:00-07:00</updated>
    <id>http://codegangsta.io/blog/2013/07/08/c-bindings-in-go-a-practical-example</id>
    <content type="html"><![CDATA[<p>I have been playing with <a href="http://golang.org/">Go</a> lately. The language itself has a lot going for it, one of which is a decent set of interop with existing C code. Today I am going to walk you through a practical example of how this is done by showing some code that I have been working on lately with Go.</p>

<h2>The Simplest Hello World</h2>

<p>Assuming you have your <a href="http://golang.org/doc/code.html">Go development environment all set up,</a> go ahead and create a new go file with the following contents:</p>

<p>``` go
package main</p>

<p>func main() {
  println("Hello world")
}
```</p>

<p>Running this should obviously print "Hello world". Let's move on!</p>

<h2>Using libspotify</h2>

<p>Lets start creating some C bindings for libspotify! libspotify is a C api distributed by Spotify that basically allows us to do everything a typical spotify app can do; log in, play, music, manipulate playlists - all available to us with libspotify.</p>

<p>For the sake of keeping this post short and to the point, we will just be creating a <code>sp_session</code> object. This session will lay some groundwork for us to log in and do the fun stuff libspotify allows us to do. Why don't we dive in:</p>

<p>``` go
package main</p>

<p>type Session struct {
  session *C.sp_session
}</p>

<p>func main() {
  println("Hello world")
}
```</p>

<p>Running this will result in an error
<code>text
./bindings.go:4: undefined: C
</code></p>

<p>This is because we actually need to use some special magic that Go provides for us, the C package.</p>

<p>``` go
package main</p>

<p>import "C"</p>

<p>type Session struct {
  session *C.sp_session
}</p>

<p>func main() {
  println("Hello world")
}
```</p>

<p>This gives us a different error:
<code>text
error: 'sp_session' undeclared (first use in this function)
error: (Each undeclared identifier is reported only once
</code></p>

<p>Cool, so it sees the C package, but sp_session doesn't exist. This is because we need to include libspotify using the <code>#include</code> directive for the C preprocessor. First make sure you have libspotify installed. On a Mac you can run <code>brew install libspotify</code>. Now try to run the following code:</p>

<p>``` go
package main</p>

<p>/*</p>

<h1>include &lt;libspotify/api.h></h1>

<p>*/
import "C"</p>

<p>type Session struct {
  session *C.sp_session
}</p>

<p>func main() {
  println("Hello world")
}
```</p>

<p>This should compile and run since <code>sp_session</code> now resides in the global C namespace! This works great for things that exist in the header, but it breaks down when we try to initialize our session:</p>

<p>``` go
package main</p>

<p>/*</p>

<h1>include &lt;libspotify/api.h></h1>

<p>*/
import "C"
import "unsafe"</p>

<p>type Session struct {
  session *C.sp_session
}</p>

<p>func main() {
  key := "appkey_good"
  session := Session{}
  appkey := C.CString(key)
  appkey_size := len(key)</p>

<p>  var config = C.sp_session_config {</p>

<pre><code>api_version:          C.SPOTIFY_API_VERSION,
cache_location:       C.CString(".spotify/"),
settings_location:    C.CString(".spotify/"),
user_agent:           C.CString("spotify for go"),
application_key:      unsafe.Pointer(appkey),
application_key_size: C.size_t(appkey_size)}
</code></pre>

<p>  C.sp_session_create(&amp;config, &amp;session.session)
}
```</p>

<p>Will result in the following error:
``` text
Undefined symbols for architecture x86_64:
  "_sp_session_create", referenced from:</p>

<pre><code>  __cgo_90280c6a3021_Cfunc_sp_session_create in bindings.cgo2.o
 (maybe you meant: __cgo_90280c6a3021_Cfunc_sp_session_create)
</code></pre>

<p>ld: symbol(s) not found for architecture x86_64
collect2: ld returned 1 exit status
<code>
This is because we didn't link libspotify. This is an easy fix, add this in the comment above `import "C"`:
</code> text</p>

<h1>cgo LDFLAGS: -lspotify.12</h1>

<p>```</p>

<p>Your code should compile and link fine. You will get a SIGSEGV in your application, this is becuase we specified a bogus app key. We will cover this in detail during Part 2 of <em>C Bindings in Go: A Practical Example</em>.</p>

<p>Until next time!</p>
]]></content>
  </entry>
  
</feed>
